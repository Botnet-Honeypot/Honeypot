version: "3"

# docker-compose for starting a database, a frontend SSH server and a backend server
# starts the containers from ../database, ../frontend and ../backend

services:
  # Database, to which other containers can connect via "database" alias (instead of IP)
  postgres:
    image: "postgres:latest"
    container_name: "postgres"
    environment:
      POSTGRES_DB: "honeypot_db"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"
    ports:
      - "5432:5432"
    volumes:
      - "../database/database:/var/lib/postgresql/data"
      - "../database/config:/docker-entrypoint-initdb.d"
    networks:
      dev:
        aliases:
          - database
    restart: always

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: frontend/Dockerfile
    ports:
      - "22:22"
    environment:
      # Allowed usernames and passwords, multiple usernamse and passwords can be supplied
      # by seperating them with ":". If they are left empty then everything is allowed
      - SSH_ALLOWED_USERNAMES
      - SSH_ALLOWED_PASSWORDS
      # Login success rate in percent (will bypass the above two settings)
      - SSH_LOGIN_SUCCESS_RATE
      # Regex that if matches will deny the login attempt
      - SSH_REGEX_USERNAMES_DENY=[1-9]|.*[A-Z]
      - SSH_REGEX_PASSWORDS_DENY=^$$ # ($ escaped with $$)
      - SSH_SERVER_PORT=22
      - SSH_LOCAL_VERSION=SSH-2.0-dropbear_2019.78 # SSH version reported by the honeypot
      - SSH_SESSION_TIMEOUT=600 # Timeout in seconds for when to treat an SSH connection inactive and end it
      # Timeout in seconds for when waiting for a TCP connection to appear
      # (5 seconds means it will check every five seconds if we want to shut it down)
      - SSH_SOCKET_TIMEOUT=5
      - SSH_MAX_UNACCEPTED_CONNECTIONS=100 # Max number of unacceped connections for the SSH socket
      - ENABLE_DEBUG_LOGGING=False
      - LOG_FILE=./frontend/honeypot.log # Log file to log to
      - BACKEND_ADDRESS=backend:80
    volumes:
      - "../frontend/frontend:/usr/src/frontend/frontend"
    networks:
      dev:
        aliases:
          - frontend
    depends_on:
      - postgres
      - backend
    restart: always

  # Backend
  backend:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    environment:
      TARGET_SYSTEM_ADDRESS: "host.docker.internal"
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      dev:
        aliases:
          - backend
    restart: always

# dev network
networks:
  dev:
